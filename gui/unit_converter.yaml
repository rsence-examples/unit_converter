type: GUITree
version: 0.4
dependencies:
  - default_theme
  - controls

class: HApplication
extend:
  # Extend the constructor to receive the options defined.
  constructor: |
    function( options ){
      this.base( options.priority, options.label );
    }
options:
  # The options are passed on to the constructor of the class, see above.
  priority: 100
  # A small priority number makes the onIdle calls more frequent,
  # a large priority number makes the onIdle colls less frequent.
  label: Unit Converter
subviews:
  - # Creates a window to contain the components.
    class: HWindow
    rect: [ 10, 10, 200, 110 ]
    options:
      closeButton: true
      noResize: true
      label: Unit Converter
    subviews:
      - # Label for the input number field
        class: HStringView
        rect: [ 8, 8, 80, 20 ]
        options:
          value: 'Number:'
      - # The input number field itself
        class: HNumericTextControl
        rect: [ 88, 8, 80, 20 ]
        options:
          # The value bound to the field (syncs with the server)
          valueObjId: :values.input_number
          # The minimun value allowed
          minValue: -1000000000
          # The maximum value allowed
          maxValue: 1000000000
          # Uses floating point numbers instead of integers
          decimalNumber: true
          # Doesn't replace the text with the validation result while typing
          refreshOnInput: false
      - # Label for the conversion factor field
        class: HStringView
        rect: [ 8, 32, 80, 20 ]
        options:
          value: 'Factor:'
      - # The conversion factor field itself
        class: HNumericTextControl
        rect: [ 88, 32, 80, 20 ]
        options:
          # The value bound to the field (syncs with the server)
          valueObjId: :values.convert_factor
          # The minimun value allowed
          minValue: -10000
          # The maximum value allowed
          maxValue: 10000
          # Uses floating point numbers instead of integers
          decimalNumber: true
          # Doesn't replace the text with the validation result while typing
          refreshOnInput: false
      - # The label for the result field
        class: HStringView
        rect: [ 8, 56, 80, 20 ]
        options:
          value: 'Result:'
      - # The result field itself
        class: HStringView
        rect: [ 88, 56, 80, 20 ]
        options:
          # The value bound to the field (syncs with the server,
          # in this case, only from the server to the client is relevant)
          valueObjId: :values.output_number
